.. cspell:ignore gmake

.. include:: /global.inc

Set up a BOSS package
=====================

How to set up a BOSS package?
-----------------------------

Now that you have configured your **BOSS** work area, you can start developing
packages. In theory, you can start from scratch. We'll have a short look at
that procedure here, because it gives some insight into the default structure
of a package in CMT. After that, we can look into some tutorial packages.

.. todo::
  The tutorial packages are to be developed soon, see the `BOSS_Tutorials
  repository <https://github.com/redeboer/BOSS_Tutorials>`_. See Shanghai
  conference for updates on this matter.

Structure of a default CMT package
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As explained in :ref:`The BOSS Analysis Framework
<tutorials/getting-started/intro:Configuration Management Tool (CMT)>`, BOSS is
organized through packages. Packages are components of the entire BOSS
framework on which individuals like you work independently. Each package on
itself can have several versions that are maintained by you through CMT.

To create an empty package (with a default format), use the following command:

.. code-block:: bash

  cmt create MyFirstPackage MyFirstPackage-00-00-00

Here, the name :code:`MyFirstPackage` is just an example name of the package.
The name will be used as the folder name as well. The second string is the
so-called *tag* of the package. Within BESIII, `the convention is that the tag
is just the package name followed by 6 digits
<https://docbes3.ihep.ac.cn/~offlinesoftware/index.php/How_to_tag_a_package>`_
: :code:`-<major id>-<minor id>-<patch id>`. These digits should increase along
with changes you make. Increase the:

* :code:`patch id` if you only made some simple bug fixes that don't change the
  interface (:code:`.h` header file);

* :code:`minor id` if you only made changes that are backward compatible, such
  as new functionality;

* :code:`major id` if you modified the interface (header file) that require you
  to completely recompile the package.

For more information on this numbering scheme, read more about this `
**semantic versioning** here <https://semver.org/>`_ (many languages
available). The above only becomes relevant as when you start developing
packages, so you can forget about this for now.

The result of the above command is a new folder, that we'll navigate into:

.. code-block:: bash

   cd MyFirstPackage/MyFirstPackage-00-00-00

Note that the folder structure :code:`MyFirstPackage/MyFirstPackage-00-00-00`
is **required** for :code:`cmt` to work properly within BOSS. If you don't have
a sub-folder with a string for the version as above, :code:`cmt broadcast`
won't work!

Within this folder, you see the core of a default CMT package:


* :code:`cmd` |br|
  A folder that contains all files necessary for administration of the package
  through CMT. There are 6 files:

  * :code:`cleanup.csh` |br|
    This is a :code:`tcsh` script that allows you to clean all installation
    files of the package (for instance useful when you are moving to a new
    version).

  * :code:`cleanup.sh` |br|
    The same as :code:`cleanup.csh` , but than in :code:`bash` shell script
    format.

  * :code:`Makefile` |br|
    A file that is necessary for compilation through :code:`make` /
    :code:`cmake` / :code:`gmake`.

  * :code:`requirements` |br|
    The most important of file! Here, you define which other packages within
    BOSS your own package requires (it defines the *dependencies*). You can
    have a closer look at this file for the :code:`TestRelease` example package
    or on `this page
    <http://polywww.in2p3.fr/activites/physique/glast/workbook/pages/cmtMRvcmt/cmtIntroduction.htm#requirementsFile>`__
    to see how this file is ordinarily formatted.

  * :code:`setup.csh` |br|
    Another important file. It is used when 'broadcasting' your package.

  * :code:`setup.sh` Same as :code:`setup.csh` , but now in :code:`bash` shell
    script format.

* :code:`src` |br|
  An empty folder that will hold your :code:`c++` source code (:code:`.cxx`
  files). Optionally, corresponding headers of these files are usually placed
  in a folder called :code:`share` but this folder is not generated by default.

For more information, see `this nice introduction to CMT
<http://polywww.in2p3.fr/activites/physique/glast/workbook/pages/cmtMRvcmt/cmtIntroduction.htm>`_.

Additional files you should create
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In addition to the default files above, it is advised that you also create the
following files/directories:

* A subdirectory with the name of your package. In our case, it should be
  called :code:`MyFirstPackage`.

* A subdirectory named :code:`test`. You use this for private testing of your
  package.

* A subdirectory named :code:`doc` for documentation files.

* A subdirectory named :code:`share` for platform-independent configuration
  files, scripts, etc.

* A file named :code:`README` that briefly describes the purpose and context of
  the package.

* A file named :code:`ChangeLog` that contains a record of the changes.

The above is based on the `official BOSS page on how to create a new package
<https://docbes3.ihep.ac.cn/~offlinesoftware/index.php/How_to_create_a_new_package>`_
(minimal explanations).

.. admonition:: Origin of the BOSS in Gaudi

  From here on, you can develop a package from scratch. For the basics of how
  to follow the guidelines of the BOSS framework (which is based on Gaudi), see
  :code:`this :code:`Hello World` example for Gaudi
  <https://lhcb.github.io/developkit-lessons/first-development-steps/02a-gaudi-helloworld.html>`_.

Updating a package
^^^^^^^^^^^^^^^^^^

Whenever you are planning to modify the code in your package (particularly the
header code in the :code:`MyFirstPackage` and the source code in :code:`src`),
it is best if you first make a copy of the latest version. You can then safely
modify things in this copy and use CMT later to properly tag this new version
later.

Copy and rename
~~~~~~~~~~~~~~~

First create some copy (of course, you'll have to replace the names here):

.. code-block:: bash

  cd MyFirstPackage
  cp -fR MyFirstPackage-00-00-00 MyFirstPackage-00-00-01

Now, imagine you have modified the interface of the package in its header
files. This, according to the :ref:`BOSS version naming convention
<tutorials/getting-started/setup-package:Structure of a default CMT package>`,
requires you to modify the :code:`major id`. So you will have to rename the
folder of the package:

.. code-block:: bash

  mv MyFirstPackage-00-00-01 MyFirstPackage-01-00-00

Tag your version using CMT
~~~~~~~~~~~~~~~~~~~~~~~~~~

Finally, it is time to use CMT to tag this new version. The thing is, simply
renaming the package is not sufficient: files like :code:`setup.sh` need to be
modified as well. Luckily, CMT does this for you automatically for. First go
into the :code:`cmt` folder of your new package:

.. code-block:: bash

  cd MyFirstPackage-01-00-00/cmt

Now **create new CMT setup and cleanup scripts** using:

.. code-block:: bash

  cmt config

If you for instance open the :code:`setup.sh` file you will see that it has
deduced the new version number from the folder name.

Build package
~~~~~~~~~~~~~

Now **build the executables** from the source code:

.. code-block:: bash

  make

It is in this step that you 'tell' CMT which version of your package to use.
First of all, executables (:file:`.o`) and libraries (:file:`.d`) are built in
the package version folder (in a folder like :code:`x86_64-slc6-gcc46-opt`).
Then, symbolic links to the header files of your package are placed in a
sub-folder called :code:`InstallArea` in your :file:`workarea`. It are the
symbolic links that determine which version of your package uses BOSS.

At this stage, you should verify in the terminal output whether your code is
actually built correctly. If not, go through your :file:`cxx` and :file:`h`
files.

Make package accessible to CMT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If it does build correctly, you can make the package accessible to BOSS using:

.. code-block:: bash

  source setup.sh

This sets certain :code:`bash` variables so that BOSS will use your version of
this package. One of these variables is called :code:`$<PACKAGE_NAME>ROOT` and
can be used to call your package in job options file (see for example
:code:`$RHOPIALGROOT` in `this template
<http://code.ihep.ac.cn/redeboer/IniSelect/-/tree/master/jobs/templates/analysis.txt>`_).

Congratulations, you have created an update of your package!

Remark on :code:`TestRelease`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As mentioned in :ref:`Step 3`, when we were modifying the :code:`requirements`
of the BOSS environment, CMT will use the first occurrence of a package in the
:code:`$CMTPATH`. That's why we used :code:`path_prepend` to add your *BOSS
workarea* to the :code:`$CMTPATH` : in case of a name conflict with a package
in the :code:`$BesArea` and one in your *workarea* , CMT will use the one in
your *workarea*.

Just to be sure, while modifying and debugging your package, you can do the
entire build-and-source procedure above in one go, using:

.. code-block:: bash

   cmt config
   make
   source setup.sh

BESIII has some documentation on working with CMT available `here
<https://docbes3.ihep.ac.cn/~offlinesoftware/index.php/Getting_Started>`_. It
seems, however, that you need special admission rights to CVS to successfully
perform these steps. The documentation is therefore probably outdated.

.. admonition:: Compare package output

  Another reason for working with a copy of the old version of your package is
  that you can still checkout and run that old version (just repeat the above
  procedure within the folder of that old version). This allows you to run the
  same analysis (see :doc:`Running jobs </tutorials/getting-started/jobs>`)
  again in the old package so that you can compare the output. **Making sure
  that structural updates of components of software still result in the same
  output is a vital part of software development!**

Adding packages to BOSS
^^^^^^^^^^^^^^^^^^^^^^^

.. todo::
  Go through Chinese documentation and `this page
  <https://docbes3.ihep.ac.cn/~offlinesoftware/index.php/Getting_Started>`__
  and write out.

.. note::
  It seems special access rights are needed for this procedure, so I have
  currently not been able to test these procedures.


Summary
-------

Whenever you have set up a package, set it up using:

.. code-block:: bash

  cd cmt          # navigate into its cmt folder
  cmt config      # OPTIONAL: reset the package
  make            # compile the source code
  source setup.sh # set bash variables for this package

If this package is a Gaudi algorithm, you can :doc:`run it as a BOSS job
</tutorials/getting-started/jobs>`.


Example packages
----------------

Within BOSS, there are already a few 'example' packages available. All of these
are accessible through the so-called `TestRelease package
<http://code.ihep.ac.cn/redeboer/IniSelect/-/tree/master/workarea/TestRelease>`_,
which will be described and set up first. We then focus on one of its main
dependencies: the `RhopiAlg algorithm
<http://code.ihep.ac.cn/redeboer/IniSelect/-/tree/master/workarea/Analysis/Physics/RhopiAlg>`_.
Within BESIII, this package is typically used as an example for selecting
events and usually forms the start of your research.

The TestRelease package
^^^^^^^^^^^^^^^^^^^^^^^

The :code:`TestRelease` package is used to run certain basic packages that are
already available within BOSS. The original source code is located here:

.. code-block:: bash

  /afs/ihep.ac.cn/bes3/offline/Boss/$BOSS_VERSION/TestRelease

If you followed the :doc:`tutorial steps for installing BOSS <setup>`, you can
find :code:`TestRelease` in your local install area under
:code:`$BOSS_INSTALL/workarea/TestRelease`. If you move into the latest version
(probably :code:`TestRelease-00-00-86`), you can see (using :code:`ls`) that it
contains the following folders:

* :code:`cmt` : the *Configuration Management Tool* that you will use to
  connect to **BOSS**.

* :code:`CVS` : a folder used for version management.

* :code:`run` : which contains some example :code:`jobOptions` that can be run
  with :code:`boss.exe`.

We can set up the :code:`TestRelease` by going into :file:`cmt` and
'broadcasting' to **BOSS** from there:

.. code-block:: bash

   cd cmt
   cmt broadcast      # connect your workarea to BOSS
   cmt config         # perform setup and cleanup scripts
   cmt broadcast make # build and connect executables to BOSS
   source setup.sh    # set bash variables

The term :code:`broadcast` is important here: as opposed to :code:`config`,
:code:`broadcast` will first compile all the required packages and then require
the package itself. The idea of the :code:`TestRelease` it that make it require
packages that you are interested in so that, if you :code:`broadcast` it, all
these dependents will be compiled.

We have now initialized the package, so that you can run it in BOSS from the
:code:`run` folder. This is done using :file:`boss.exe` :

.. code-block:: bash

   cd ../run
   boss.exe jobOptions_sim.txt

which, in this case, will run a Monte Carlo simulation.

Note that :ref:`when we set up the workarea <step7>`, we added :code:`source
setup.sh` line to the :file:`.bashrc` that ensures that the :code:`TestRelease`
package is loaded every time you log in, so you won't have to do this every
time yourself.

BOSS Example Packages
^^^^^^^^^^^^^^^^^^^^^

Physics related example packages are described :doc:`here
</packages/analysis/examples>`. Within BESIII, :doc:`RhopiAlg
</packages/analysis/examples/RhopiAlg>` and :doc:`PipiJpsiAlg
</packages/analysis/examples/PipiJpsiAlg>` are commonly used as examples for
initial event selection.

.. tip::
  BOSS Tutorials are under development and can be found in the `BOSS_Tutorials
  repository <https://github.com/redeboer/BOSS_Tutorials>`_.

  :doc:`/packages/analysis/examples/RhopiAlg`
